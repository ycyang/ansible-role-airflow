# {{ ansible_managed }}

[core]
# The home folder for airflow, default is ~/airflow
airflow_home = {{ airflow_config.core.home }}

# The folder where your airflow pipelines live, most likely a
# subfolder in a code repository
# This path must be absolute
dags_folder = {{ airflow_config.core.dags_folder }}

# The folder where airflow should store its log files
# This path must be absolute
base_log_folder = {{ airflow_config.core.base_log_folder }}

# Airflow can store logs remotely in AWS S3 or Google Cloud Storage. Users
# must supply a remote location URL (starting with either 's3://...' or
# 'gs://...') and an Airflow connection id that provides access to the storage
# location.
remote_base_log_folder = {{ airflow_config.core.remote_base_log_folder }}
remote_log_conn_id = {{ airflow_config.core.remote_log_conn_id }}
# Use server-side encryption for logs stored in S3
encrypt_s3_logs = {{ airflow_config.core.encrypt_s3_logs }}
# DEPRECATED option for remote log storage, use remote_base_log_folder instead!
s3_log_folder = {{ airflow_config.core.s3_log_folder }}

# The executor class that airflow should use. Choices include
# SequentialExecutor, LocalExecutor, CeleryExecutor
executor = {{ airflow_config.core.executor }}

# The SqlAlchemy connection string to the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
sql_alchemy_conn = {{ airflow_config.core.sql_alchemy_conn }}

# The SqlAlchemy pool size is the maximum number of database connections
# in the pool.
sql_alchemy_pool_size = {{ airflow_config.core.sql_alchemy_pool_size }}

# The SqlAlchemy pool recycle is the number of seconds a connection
# can be idle in the pool before it is invalidated. This config does
# not apply to sqlite.
sql_alchemy_pool_recycle = {{ airflow_config.core.sql_alchemy_pool_recycle }}

# The amount of parallelism as a setting to the executor. This defines
# the max number of task instances that should run simultaneously
# on this airflow installation
parallelism = {{ airflow_config.core.parallelism }}

# The number of task instances allowed to run concurrently by the scheduler
dag_concurrency = {{ airflow_config.core.dag_concurrency }}

# Are DAGs paused by default at creation
dags_are_paused_at_creation = {{ airflow_config.core.dags_are_paused_at_creation }}

# When not using pools, tasks are run in the "default pool",
# whose size is guided by this config element
non_pooled_task_slot_count = {{ airflow_config.core.non_pooled_task_slot_count }}

# The maximum number of active DAG runs per DAG
max_active_runs_per_dag = {{ airflow_config.core.max_active_runs_per_dag }}

# Whether to load the examples that ship with Airflow. It's good to
# get started, but you probably want to set this to False in a production
# environment
load_examples = {{ airflow_config.core.load_examples }}

# Where your Airflow plugins are stored
plugins_folder = {{ airflow_config.core.plugins_folder }}

# Secret key to save connection passwords in the db
fernet_key = {{ airflow_config.core.fernet_key }}

# Whether to disable pickling dags
donot_pickle = {{ airflow_config.core.donot_pickle }}

# How long before timing out a python file import while filling the DagBag
dagbag_import_timeout = {{ airflow_config.core.dagbag_import_timeout }}

# The class to use for running task instances in a subprocess
task_runner = {{ airflow_config.core.task_runner }}

# If set, tasks without a `run_as_user` argument will be run with this user
# Can be used to de-elevate a sudo user running Airflow when executing tasks
default_impersonation = {{ airflow_config.core.default_impersonation }}

# What security module to use (for example kerberos):
security = {{ airflow_config.core.security }}

# Turn unit test mode on (overwrites many configuration options with test
# values at runtime)
unit_test_mode = {{ airflow_config.core.unit_test_mode }}

[cli]
# In what way should the cli access the API. The LocalClient will use the
# database directly, while the json_client will use the api running on the
# webserver
api_client = {{ airflow_config.cli.api_client }}
endpoint_url = {{ airflow_config.cli.endpoint_url }}

[api]
# How to authenticate users of the API
auth_backend = {{ airflow_config.api.auth_backend }}

[operators]
# The default owner assigned to each new operator, unless
# provided explicitly or passed via `default_args`
default_owner = {{ airflow_config.operators.default_owner }}
default_cpus = {{ airflow_config.operators.default_cpus }}
default_ram = {{ airflow_config.operators.default_ram }}
default_disk = {{ airflow_config.operators.default_disk }}
default_gpus = {{ airflow_config.operators.default_gpus }}


[webserver]
# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server
base_url = {{ airflow_config.webserver.base_url }}

# The ip specified when starting the web server
web_server_host = {{ airflow_config.webserver.web_server_host }}

# The port on which to run the web server
web_server_port = {{ airflow_config.webserver.web_server_port }}

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
web_server_ssl_cert = {{ airflow_config.webserver.web_server_ssl_cert }}
web_server_ssl_key = {{ airflow_config.webserver.web_server_ssl_key }}

# Number of seconds the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = {{ airflow_config.webserver.web_server_worker_timeout }}

# Number of workers to refresh at a time. When set to 0, worker refresh is
# disabled. When nonzero, airflow periodically refreshes webserver workers by
# bringing up new ones and killing old ones.
worker_refresh_batch_size = {{ airflow_config.webserver.worker_refresh_batch_size }}

# Number of seconds to wait before refreshing a batch of workers.
worker_refresh_interval = {{ airflow_config.webserver.worker_refresh_interval }}

# Secret key used to run your flask app
secret_key = {{ airflow_config.webserver.secret_key }}

# Number of workers to run the Gunicorn web server
workers = {{ airflow_config.webserver.workers }}

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
worker_class = {{ airflow_config.webserver.worker_class }}

# Log files for the gunicorn webserver. '-' means log to stderr.
access_logfile = {{ airflow_config.webserver.access_logfile }}
error_logfile = {{ airflow_config.webserver.error_logfile }}

# Expose the configuration file in the web server
expose_config = {{ airflow_config.webserver.expose_config }}

# Set to true to turn on authentication:
# http://pythonhosted.org/airflow/security.html#web-authentication
authenticate = {{ airflow_config.webserver.authenticate }}

# Filter the list of dags by owner name (requires authentication to be enabled)
filter_by_owner = {{ airflow_config.webserver.filter_by_owner }}

# Filtering mode. Choices include user (default) and ldapgroup.
# Ldap group filtering requires using the ldap backend
#
# Note that the ldap server needs the "memberOf" overlay to be set up
# in order to user the ldapgroup mode.
owner_mode = {{ airflow_config.webserver.owner_mode }}

# Default DAG orientation. Valid values are:
# LR (Left->Right), TB (Top->Bottom), RL (Right->Left), BT (Bottom->Top)
dag_orientation = {{ airflow_config.webserver.dag_orientation }}

# Puts the webserver in demonstration mode; blurs the names of Operators for
# privacy.
demo_mode = {{ airflow_config.webserver.demo_mode }}

# The amount of time (in secs) webserver will wait for initial handshake
# while fetching logs from other worker machine
log_fetch_timeout_sec = {{ airflow_config.webserver.log_fetch_timeout_sec }}

# By default, the webserver shows paused DAGs. Flip this to hide paused
# DAGs by default
hide_paused_dags_by_default = {{ airflow_config.webserver.hide_paused_dags_by_default }}

[email]
email_backend = {{ airflow_config.email.email_backend }}


[smtp]
# If you want airflow to send emails on retries, failure, and you want to use
# the airflow.utils.email.send_email_smtp function, you have to configure an
# smtp server here
smtp_host = {{ airflow_config.smtp.smtp_host }}
smtp_starttls = {{ airflow_config.smtp.smtp_starttls }}
smtp_ssl = {{ airflow_config.smtp.smtp_ssl }}
# Uncomment and set the user/pass settings if you want to use SMTP AUTH
# smtp_user = airflow
# smtp_password = airflow
{% if airflow_config.smtp.smtp_user is defined %}
smtp_user = {{ airflow_config.smtp.smtp_user }}
{% endif %}
{% if airflow_config.smtp.smtp_password is defined %}
smtp_password = {{ airflow_config.smtp.smtp_password }}
{% endif %}
smtp_port = {{ airflow_config.smtp.smtp_port }}
smtp_mail_from = {{ airflow_config.smtp.smtp_mail_from }}


[celery]
# This section only applies if you are using the CeleryExecutor in
# [core] section above

# The app name that will be used by celery
celery_app_name = {{ airflow_config.celery.celery_app_name }}

# The concurrency that will be used when starting workers with the
# "airflow worker" command. This defines the number of task instances that
# a worker will take, so size up your workers based on the resources on
# your worker box and the nature of your tasks
celeryd_concurrency = {{ airflow_config.celery.celeryd_concurrency }}

# When you start an airflow worker, airflow starts a tiny web server
# subprocess to serve the workers local log files to the airflow main
# web server, who then builds pages and sends them to users. This defines
# the port on which the logs are served. It needs to be unused, and open
# visible from the main web server to connect into the workers.
worker_log_server_port = {{ airflow_config.celery.worker_log_server_port }}

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
# a sqlalchemy database. Refer to the Celery documentation for more
# information.
broker_url = {{ airflow_config.celery.broker_url }}

# Another key Celery setting
celery_result_backend = {{ airflow_config.celery.celery_result_backend }}

# Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start
# it `airflow flower`. This defines the IP that Celery Flower runs on
flower_host = {{ airflow_config.celery.flower_host }}

# This defines the port that Celery Flower runs on
flower_port = {{ airflow_config.celery.flower_port }}

# Default queue that tasks get assigned to and that worker listen on.
default_queue = {{ airflow_config.celery.default_queue }}


[scheduler]
# Task instances listen for external kill signal (when you clear tasks
# from the CLI or the UI), this defines the frequency at which they should
# listen (in seconds).
job_heartbeat_sec = {{ airflow_config.scheduler.job_heartbeat_sec }}

# The scheduler constantly tries to trigger new tasks (look at the
# scheduler section in the docs for more information). This defines
# how often the scheduler should run (in seconds).
scheduler_heartbeat_sec = {{ airflow_config.scheduler.scheduler_heartbeat_sec }}

# after how much time should the scheduler terminate in seconds
# -1 indicates to run continuously (see also num_runs)
run_duration = {{ airflow_config.scheduler.run_duration }}

# after how much time a new DAGs should be picked up from the filesystem
min_file_process_interval = {{ airflow_config.scheduler.min_file_process_interval }}

dag_dir_list_interval = {{ airflow_config.scheduler.dag_dir_list_interval }}

# How often should stats be printed to the logs
print_stats_interval = {{ airflow_config.scheduler.print_stats_interval }}

child_process_log_directory = {{ airflow_config.scheduler.child_process_log_directory }}

# Local task jobs periodically heartbeat to the DB. If the job has
# not heartbeat in this many seconds, the scheduler will mark the
# associated task instance as failed and will re-schedule the task.
scheduler_zombie_task_threshold = {{ airflow_config.scheduler.scheduler_zombie_task_threshold }}

# Turn off scheduler catchup by setting this to False.
# Default behavior is unchanged and
# Command Line Backfills still work, but the scheduler
# will not do scheduler catchup if this is False,
# however it can be set on a per DAG basis in the
# DAG definition (catchup)
catchup_by_default = {{ airflow_config.scheduler.catchup_by_default }}

# Statsd (https://github.com/etsy/statsd) integration settings
statsd_on = {{ airflow_config.scheduler.statsd_on }}
statsd_host = {{ airflow_config.scheduler.statsd_host }}
statsd_port = {{ airflow_config.scheduler.statsd_port }}
statsd_prefix = {{ airflow_config.scheduler.statsd_prefix }}

# The scheduler can run multiple threads in parallel to schedule dags.
# This defines how many threads will run. However airflow will never
# use more threads than the amount of cpu cores available.
max_threads = {{ airflow_config.scheduler.max_threads }}

authenticate = {{ airflow_config.scheduler.authenticate }}


[mesos]
# Mesos master address which MesosExecutor will connect to.
master = {{ airflow_config.mesos.master }}

# The framework name which Airflow scheduler will register itself as on mesos
framework_name = {{ airflow_config.mesos.framework_name }}

# Number of cpu cores required for running one task instance using
# 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
# command on a mesos slave
task_cpu = {{ airflow_config.mesos.task_cpu }}

# Memory in MB required for running one task instance using
# 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
# command on a mesos slave
task_memory = {{ airflow_config.mesos.task_memory }}

# Enable framework checkpointing for mesos
# See http://mesos.apache.org/documentation/latest/slave-recovery/
checkpoint = {{ airflow_config.mesos.checkpoint }}

# Failover timeout in milliseconds.
# When checkpointing is enabled and this option is set, Mesos waits
# until the configured timeout for
# the MesosExecutor framework to re-register after a failover. Mesos
# shuts down running tasks if the
# MesosExecutor framework fails to re-register within this timeframe.
# failover_timeout = 604800
{% if airflow_config.mesos.failover_timeout is defined %}
failover_timeout = {{ airflow_config.mesos.failover_timeout }}
{% endif %}

# Enable framework authentication for mesos
# See http://mesos.apache.org/documentation/latest/configuration/
authenticate = {{ airflow_config.mesos.authenticate }}

# Mesos credentials, if authentication is enabled
# default_principal = admin
# default_secret = admin
{% if airflow_config.mesos.default_principal is defined %}
default_principal = {{ airflow_config.mesos.default_principal }}
{% endif %}
{% if airflow_config.mesos.default_secret is defined %}
default_secret = {{ airflow_config.mesos.default_secret }}
{% endif %}


[kerberos]
ccache = {{ airflow_config.kerberos.ccache }}
# gets augmented with fqdn
principal = {{ airflow_config.kerberos.principal }}
reinit_frequency = {{ airflow_config.kerberos.reinit_frequency }}
kinit_path = {{ airflow_config.kerberos.kinit_path }}
keytab = {{ airflow_config.kerberos.keytab }}


[github_enterprise]
api_rev = {{ airflow_config.github_enterprise.api_rev }}


[admin]
# UI to hide sensitive variable fields when set to True
hide_sensitive_variable_fields = {{ airflow_config.admin.hide_sensitive_variable_fields }}
